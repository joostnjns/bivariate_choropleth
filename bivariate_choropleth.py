# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BivariateChoropleth
                                 A QGIS plugin
 Bivariate Choropleth Maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-10-25
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Joost Neujens
        email                : jneujens@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import QgsProject

from PyQt5.QtCore import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .bivariate_choropleth_dialog import BivariateChoroplethDialog
import os.path
import qgis
from qgis.core import QgsFeature, QgsField
from qgis.core import QgsFeatureRequest

class BivariateChoropleth:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BivariateChoropleth_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Bivariate Choropleth Maps')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BivariateChoropleth', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/bivariate_choropleth/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Bivariate Choropleth Maps'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Bivariate Choropleth Maps'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
       


        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = BivariateChoroplethDialog()
            
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
         

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            # Get selected layer
            selectedLayerIndex = self.dlg.comboBox.currentIndex()
            selectedLayer = layers[selectedLayerIndex].layer()

            # Get attribute names to filter on
            attr1 = self.dlg.textEdit_3.toPlainText()
            attr2 = self.dlg.textEdit_4.toPlainText()

            # Get tresholds from input
            input_tresh1 = self.dlg.textEdit_1.toPlainText()
            input_tresh2 = self.dlg.textEdit_2.toPlainText()

            tresholds1 = [int(x) for x in input_tresh1.split(',')]  #%HH hosting displaces MSNA MORE RED
            tresholds2 = [int(x) for x in input_tresh2.split(',')]  #IDP HHs according IOM  MORE BLUE

            # Set tresholds for categories
            #tresholds1 = [0, 1,  5, 27]
            #tresholds2 = [60,1500,3000,9673]

            # Create color matrix
            color_matrix = [["#CABED0", "#BC7C8F", "#AE3A4E"],
                            ["#89A1C8", "#806A8A", "#77324C"],
                            ["#4885C1", "#435786", "#3F2949"]]


            # Add attribute if it does not exist            
            fields = [field.name() for field in selectedLayer.fields()]

            if "bicolor" not in fields:
                selectedLayer.dataProvider().addAttributes([QgsField("test", QVariant.String)])

                selectedLayer.updateFields()

            # Loop through all the possible combinations and assign color to each selection
            for i in range(0, len(tresholds1)-1):
                for j in range(0, len(tresholds2)-1):
                    where_sql = " \"{0}\" >= {1} AND \"{2}\" < {3} AND \"{4}\" >= {5} AND \"{6}\" < {7} ".format(attr1,tresholds1[i], attr1, tresholds1[i+1], attr2, tresholds2[j], attr2, tresholds2[j+1] )
                    selection = selectedLayer.getFeatures(QgsFeatureRequest().setFilterExpression(where_sql))
                    selectedLayer.startEditing()

                    for feat in selection:
                        selectedLayer.changeAttributeValue(feat.id(), 6, color_matrix[j][i])


                    selectedLayer.commitChanges()
